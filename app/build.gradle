/*
 * MIT License
 *
 * Copyright (c) 2022  Frederick Nyawaya
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

// Gets the version code -- number of git tags to this end
def getVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'tag', '--list'
            standardOutput = code
        }
        return code.toString().split("\n").size()
    }
    catch (ignored) {
        return -1
    }
}

// Gets the version name from the latest Git tag
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

android {
    signingConfigs {
        release {
            storeFile file('soapsample.jks')
            keyAlias 'soapsample'
            keyPassword 'soapsample'
            storePassword 'soapsample'
        }
    }

    compileSdkVersion 31

    defaultConfig {
        applicationId "com.cafrecode.soapsample"
        minSdkVersion 19
        targetSdkVersion 31
        versionCode getVersionCode()
        versionName getVersionName()

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    dataBinding {
        enabled = true
    }
    viewBinding {
        enabled = true
    }
    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }
    lintOptions {
        abortOnError false
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
    applicationVariants.all { variant ->
        //Only name the release variants -- might not be absolutely necessary as CI handles the publishing, but good for local manual builds
        if (variant.buildType.name == "release") {

            def apkName = "soapsample"
            variant.outputs.each { output ->
                def apk = output.outputFileName.replace(".apk", "")

                apkName += "-" + defaultConfig.versionName
                if (variant.buildType.name == "release") {
                    apkName += "-release.apk"
                } else {
                    apkName += ".apk"
                }
                if (!output.zipAlign) {
                    apkName = apkName.replace(".apk", "-unaligned.apk")
                }

                output.outputFileName = new File(apk, apkName)
                logger.info("INFO: Set outputFile to "
                        + output.outputFile
                        + " for [" + output.name + "]")
            }
        }
    }
}

dependencies {
    def nav_version = "2.4.0"
    def room_version = "2.4.1"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    // Retrofit + SOAP things
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:3.3.1'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation ('com.squareup.retrofit2:converter-simplexml:2.1.0'){
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
        exclude group: 'xpp3', module: 'xpp3'
    }

    // Java language implementation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    // Room things, architecture components
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // lifecycle kotlin extensions
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.0'


    // Work around for some Android 11 and Firebase failures:: java.lang.AssertionError: Method getAlpnSelectedProtocol not supported for object SSL socket over Socket
    implementation "io.grpc:grpc-okhttp:1.32.2"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0'

    implementation 'androidx.multidex:multidex:2.0.1'

    // DI - Hilt
    implementation "com.google.dagger:hilt-android:2.37"
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03'
    kapt 'androidx.hilt:hilt-compiler:1.0.0'
    kapt "com.google.dagger:hilt-android-compiler:2.37"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'com.squareup.okhttp3:okhttp:4.9.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation "androidx.test.espresso:espresso-intents:3.4.0"

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}